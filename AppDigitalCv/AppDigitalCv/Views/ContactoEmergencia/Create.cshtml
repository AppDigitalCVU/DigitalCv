@using AppDigitalCv.Security
@model AppDigitalCv.ViewModels.EmergenciaViewModel

@{
    /**/

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="bs-container content" style="min-height:960px;">
        <section class="content-header">
            <h1>
                Datos de Contacto de Emergencia
                <small>(Agregar)</small>
            </h1>
            <ol class="breadcrumb">
                <li><a href="#"> <i class="fa fa-dashboard"></i> Inicio </a></li>
                <li> <a href="#">Datos de Contacto</a></li>
                <li class="active">Emergencia</li>
            </ol>
        </section>
        <br />
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h5 class="box-title">
                            <label class="text-success emailtitleletter">
                                <i class="text-success fa fa-heartbeat"></i>
                                @SessionPersister.AccountSession.Nombre
                            </label>
                        </h5>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="form-horizontal">
                            <div class="form-group-sm">
                                Nombre del Familiar:@Html.TextBoxFor(model => model.StrNombre, htmlAttributes: new { @class = "form-control input-sm", title = "Ingresa el nombre del familiar", placeholder = "Ingresa el nombre del familiar completo" })
                            </div>
                            <div class="form-group-sm">
                                Parentesco:@Html.DropDownList("IdParentesco", null, htmlAttributes: new { @class = "form-control input-sm", id = "IdParentesco", title = "Selecciona el Parentesco" })
                            </div>
                            <div class="form-group-sm">
                                Telefono:@Html.TextBoxFor(model => model.StrTelefono, null, htmlAttributes: new { @class = "form-control input-sm", title = "Ingresa el telefono del familiar", placeholder = "Ingresa el telefono del familiar completo" })
                            </div>
                            <div class="form-group-sm">
                                Direccion Completa:@Html.TextBoxFor(model => model.StrDireccion, htmlAttributes: new { @class = "form-control input-sm", title = "Ingresa la dirección completa del familiar", placeholder = "Ingresa la dirección completa del familiar" })
                            </div>
                            <br />
                            <div class="form-group-sm">
                                <input type="submit" value="Guardar" class="btn btn-sm btn-success" />
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section scripts
{
    <script src="https://code.jquery.com/jquery-2.1.4.min.js"
            integrity="sha256-8WqyJLuWKRBVhxXIL1jBDD7SDxU936oZkCnxQbWwJVw="
            crossorigin="anonymous"></script>

    <script src="~/Content/js/plugins/bootstrap/bootstrap.min.js"></script>
    <script src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap4.min.js"></script>

    <script>


        $(document).ready(function () {

            var oTable;
            BindDataTable();

            function BindDataTable() {

                if ($.fn.DataTable.isDataTable('#tblFamiliares')) {
                    oTable.Draw();
                }
                else {

                    oTable = $('#tblFamiliares').DataTable({
                        "bServerSide": true,
                        "sAjaxSource": '/DatosFamiliares/GetDatosFamiliaresTable',
                        "fnServerData": function (sSource, aoData, fnCallback) {
                            $.ajax({
                                type: "Get",
                                data: aoData,
                                url: sSource,
                                success: fnCallback
                            })
                        },
                        "pageLength": 5,
                        "language": {

                            "sProcessing": "Procesando...",
                            "sLengthMenu": "Mostrar _MENU_ registros",
                            "sZeroRecords": "No se encontraron resultados",
                            "sEmptyTable": "Ningún dato disponible en esta tabla",
                            "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                            "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                            "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                            "sInfoPostFix": "",
                            "sSearch": "Buscar:",
                            "sUrl": "",
                            "sInfoThousands": ",",
                            "sLoadingRecords": "Cargando...",
                            "oPaginate": {
                                "sFirst": "Primero",
                                "sLast": "Último",
                                "sNext": "Siguiente",
                                "sPrevious": "Anterior"
                            },
                            "oAria": {
                                "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                                "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                            }
                        },
                        "dataSrc": " ",
                        "columns": [

                            { "data": "StrNombre" },
                            { "data": "StrOcupacion" },
                            { "data": "StrDomicilio" },
                            { "data": "IntEdad" },
                            { "data": "DteFechaNacimiento" },
                            {
                                "data": "IdFamiliar",
                                "render": function (IdFamiliar, type, full, meta) {

                                    return '<a href="#" onclick="AddEditar(' + IdFamiliar + ')"><i class="btn btn-sm btn-success fa fa-pencil-square-o"></i></a>'
                                }
                            },
                            {
                                "data": "IdFamiliar",
                                "render": function (IdFamiliar, type, full, meta) {

                                    return '<a href="#" onclick="AddDelete(' + IdFamiliar + ')"><i class="btn btn-sm btn-google glyphicon glyphicon-trash"></i></a>'
                                }
                            },
                        ]
                    });
                }
            }
    });
    </script>
}
